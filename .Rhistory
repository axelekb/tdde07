y = ebay_data$nBids
Sigma = 100 * solve(t(X)%*%X)
mu = matrix(0, 9, 1)
initVal = numeric(9)
LogPostPoisson <- function(betas,y,X,mu,Sigma){ #from lecture
linPred <- (X%*%betas);
logLik <- sum(y*linPred- exp(linPred))
print(Sigma)
logPrior <- dmvnorm(betas, mu, Sigma, log=TRUE);
return(logLik + logPrior)
}
optimRes = optim(initVal,LogPostPoisson, gr=NULL, y, X, mu, Sigma, method=c("BFGS"), control=list(fnscale=-1), hessian=TRUE)
beta_tilde = optimRes$par
JInv = solve(-optimRes$hessian)
nDraws = 1000
betas_posterior = rmvnorm(nDraws, beta_tilde, JInv)
plot(density(betas_posterior[,9]))
theta <-  as.vector(rep(0,dim(X)[2]))
#a
beta_model = glm(formula=nBids ~ PowerSeller + VerifyID + Sealed + Minblem + MajBlem + LargNeg + LogBook + MinBidShare, data=ebay_data, family=poisson())
#2
ebay_data = read.csv("eBayNumberOfBidderData.dat", header = TRUE, sep = "")
X = as.matrix(ebay_data[,-1])
y = ebay_data$nBids
Sigma = 100 * solve(t(X)%*%X)
mu = matrix(0, 9, 1)
initVal = numeric(9)
LogPostPoisson <- function(theta,y,X,mu,Sigma){ #from lecture
linPred <- (X%*%theta);
logLik <- sum(y*linPred- exp(linPred))
print(Sigma)
logPrior <- dmvnorm(theta, mu, Sigma, log=TRUE);
return(logLik + logPrior)
}
metropolisRandomWalk <- function(c, SIGMA, fcn, ...) { #... = y, X, mu
theta = matrix(0,1,9);
theta_matrix = matrix(0, nDraws, 1)
for (i in 1:nDraws) {
theta_proposal = rmvnorm(1, theta, c*SIGMA) #step 1
logPost_old = fcn(theta, ..., SIGMA) #step 2
logPost_new = fcn(theta_proposal, ..., SIGMA) # pass them here
alpha = min(1, exp(logPost_old - logPost_new))
comparer = runif(0,1) #step 3
if (alpha > runif) {
theta = theta_proposal
}
theta_matrix[i] = theta
}
return (theta_matrix)
}
theta_matrix = metropolisRandomWalk(1, JInv, LogPostPoisson, y, X, beta_tilde)
nDraws = 1000
LogPostPoisson <- function(theta,y,X,mu,Sigma){ #from lecture
linPred <- (X%*%theta);
logLik <- sum(y*linPred- exp(linPred))
print(Sigma)
logPrior <- dmvnorm(theta, mu, Sigma, log=TRUE);
return(logLik + logPrior)
}
metropolisRandomWalk <- function(c, SIGMA, fcn, ...) { #... = y, X, mu
theta = matrix(0,1,9);
theta_matrix = matrix(0, nDraws, 1)
for (i in 1:nDraws) {
theta_proposal = rmvnorm(1, theta, c*SIGMA) #step 1
logPost_old = fcn(theta, ..., SIGMA) #step 2
logPost_new = fcn(theta_proposal, ..., SIGMA) # pass them here
alpha = min(1, exp(logPost_old - logPost_new))
comparer = runif(0,1) #step 3
if (alpha > runif) {
theta = theta_proposal
}
theta_matrix[i] = theta
}
return (theta_matrix)
}
theta_matrix = metropolisRandomWalk(1, JInv, LogPostPoisson, y, X, beta_tilde)
JInv = solve(-optimRes$hessian)
library(mvtnorm)
#prior draws
X = as.matrix(ebay_data[,-1])
y = ebay_data$nBids
Sigma = 100 * solve(t(X)%*%X)
mu = matrix(0, 9, 1)
initVal = numeric(9)
LogPostPoisson <- function(betas,y,X,mu,Sigma){ #from lecture
linPred <- (X%*%betas);
logLik <- sum(y*linPred- exp(linPred))
print(Sigma)
logPrior <- dmvnorm(betas, mu, Sigma, log=TRUE);
return(logLik + logPrior)
}
optimRes = optim(initVal,LogPostPoisson, gr=NULL, y, X, mu, Sigma, method=c("BFGS"), control=list(fnscale=-1), hessian=TRUE)
beta_tilde = optimRes$par
JInv = solve(-optimRes$hessian)
LogPostPoisson <- function(theta,y,X,mu,Sigma){ #from lecture
linPred <- (X%*%theta);
logLik <- sum(y*linPred- exp(linPred))
print(Sigma)
logPrior <- dmvnorm(theta, mu, Sigma, log=TRUE);
return(logLik + logPrior)
}
metropolisRandomWalk <- function(c, SIGMA, fcn, ...) { #... = y, X, mu
theta = matrix(0,1,9);
theta_matrix = matrix(0, nDraws, 1)
for (i in 1:nDraws) {
theta_proposal = rmvnorm(1, theta, c*SIGMA) #step 1
logPost_old = fcn(theta, ..., SIGMA) #step 2
logPost_new = fcn(theta_proposal, ..., SIGMA) # pass them here
alpha = min(1, exp(logPost_old - logPost_new))
comparer = runif(0,1) #step 3
if (alpha > runif) {
theta = theta_proposal
}
theta_matrix[i] = theta
}
return (theta_matrix)
}
theta_matrix = metropolisRandomWalk(1, JInv, LogPostPoisson, y, X, beta_tilde)
LogPostPoisson <- function(theta,y,X,mu,Sigma){ #from lecture
linPred <- (X%*%t(theta));
logLik <- sum(y*linPred- exp(linPred))
print(Sigma)
logPrior <- dmvnorm(theta, mu, Sigma, log=TRUE);
return(logLik + logPrior)
}
metropolisRandomWalk <- function(c, SIGMA, fcn, ...) { #... = y, X, mu
theta = matrix(0,1,9);
theta_matrix = matrix(0, nDraws, 1)
for (i in 1:nDraws) {
theta_proposal = rmvnorm(1, theta, c*SIGMA) #step 1
logPost_old = fcn(theta, ..., SIGMA) #step 2
logPost_new = fcn(theta_proposal, ..., SIGMA) # pass them here
alpha = min(1, exp(logPost_old - logPost_new))
comparer = runif(0,1) #step 3
if (alpha > runif) {
theta = theta_proposal
}
theta_matrix[i] = theta
}
return (theta_matrix)
}
theta_matrix = metropolisRandomWalk(1, JInv, LogPostPoisson, y, X, beta_tilde)
LogPostPoisson <- function(theta,y,X,mu,Sigma){ #from lecture
linPred <- (X%*%t(theta));
logLik <- sum(y*linPred- exp(linPred))
logPrior <- dmvnorm(theta, mu, Sigma, log=TRUE);
return(logLik + logPrior)
}
metropolisRandomWalk <- function(c, SIGMA, fcn, ...) { #... = y, X, mu
theta = matrix(0,1,9);
theta_matrix = matrix(0, nDraws, 1)
for (i in 1:nDraws) {
theta_proposal = rmvnorm(1, theta, c*SIGMA) #step 1
logPost_old = fcn(theta, ..., SIGMA) #step 2
logPost_new = fcn(theta_proposal, ..., SIGMA) # pass them here
alpha = min(1, exp(logPost_old - logPost_new))
comparer = runif(1,0,1) #step 3
if (alpha > runif) {
theta = theta_proposal
}
theta_matrix[i] = theta
}
return (theta_matrix)
}
theta_matrix = metropolisRandomWalk(1, JInv, LogPostPoisson, y, X, beta_tilde)
set.seed(12345)
LogPostPoisson <- function(theta,y,X,mu,Sigma){ #from lecture
linPred <- (X%*%t(theta));
logLik <- sum(y*linPred- exp(linPred))
logPrior <- dmvnorm(theta, mu, Sigma, log=TRUE);
return(logLik + logPrior)
}
metropolisRandomWalk <- function(c, SIGMA, fcn, ...) { #... = y, X, mu
theta = matrix(0,1,9);
theta_matrix = matrix(0, nDraws, 1)
for (i in 1:nDraws) {
theta_proposal = rmvnorm(1, theta, c*SIGMA) #step 1
logPost_old = fcn(theta, ..., SIGMA) #step 2
logPost_new = fcn(theta_proposal, ..., SIGMA) # pass them here
alpha = min(1, exp(logPost_old - logPost_new))
comparer = runif(0,1) #step 3
if (alpha > comparer) {
theta = theta_proposal
}
theta_matrix[i] = theta
}
return (theta_matrix)
}
theta_matrix = metropolisRandomWalk(1, JInv, LogPostPoisson, y, X, beta_tilde)
LogPostPoisson <- function(theta,y,X,mu,Sigma){ #from lecture
linPred <- (X%*%t(theta));
logLik <- sum(y*linPred- exp(linPred))
logPrior <- dmvnorm(theta, mu, Sigma, log=TRUE);
return(logLik + logPrior)
}
metropolisRandomWalk <- function(c, SIGMA, fcn, ...) { #... = y, X, mu
theta = matrix(0,1,9);
theta_matrix = matrix(0, nDraws, 1)
for (i in 1:nDraws) {
theta_proposal = rmvnorm(1, theta, c*SIGMA) #step 1
logPost_old = fcn(theta, ..., SIGMA) #step 2
logPost_new = fcn(theta_proposal, ..., SIGMA) # pass them here
alpha = min(1, exp(logPost_old - logPost_new))
comparer = runif(1,0,1) #step 3
if (alpha > comparer) {
theta = theta_proposal
}
theta_matrix[i] = theta
}
return (theta_matrix)
}
theta_matrix = metropolisRandomWalk(1, JInv, LogPostPoisson, y, X, beta_tilde)
warnings()
LogPostPoisson <- function(theta,y,X,mu,Sigma){ #from lecture
linPred <- (X%*%t(theta));
logLik <- sum(y*linPred- exp(linPred))
logPrior <- dmvnorm(theta, mu, Sigma, log=TRUE);
return(logLik + logPrior)
}
metropolisRandomWalk <- function(c, SIGMA, fcn, ...) { #... = y, X, mu
theta = matrix(0,1,9);
theta_matrix = matrix(0, 9, nDraws)
for (i in 1:nDraws) {
theta_proposal = rmvnorm(1, theta, c*SIGMA) #step 1
logPost_old = fcn(theta, ..., SIGMA) #step 2
logPost_new = fcn(theta_proposal, ..., SIGMA) # pass them here
alpha = min(1, exp(logPost_old - logPost_new))
comparer = runif(1,0,1) #step 3
if (alpha > comparer) {
theta = theta_proposal
}
theta_matrix[i,] = theta
}
return (theta_matrix)
}
theta_matrix = metropolisRandomWalk(1, JInv, LogPostPoisson, y, X, beta_tilde)
matrix(0,9,1000)
LogPostPoisson <- function(theta,y,X,mu,Sigma){ #from lecture
linPred <- (X%*%t(theta));
logLik <- sum(y*linPred- exp(linPred))
logPrior <- dmvnorm(theta, mu, Sigma, log=TRUE);
return(logLik + logPrior)
}
metropolisRandomWalk <- function(c, SIGMA, fcn, ...) { #... = y, X, mu
theta = matrix(0,1,9);
theta_matrix = matrix(0, 9, nDraws)
for (i in 1:nDraws) {
theta_proposal = rmvnorm(1, theta, c*SIGMA) #step 1
logPost_old = fcn(theta, ..., SIGMA) #step 2
logPost_new = fcn(theta_proposal, ..., SIGMA) # pass them here
alpha = min(1, exp(logPost_old - logPost_new))
comparer = runif(1,0,1) #step 3
if (alpha > comparer) {
theta = theta_proposal
}
theta_matrix[,i] = theta
}
return (theta_matrix)
}
theta_matrix = metropolisRandomWalk(1, JInv, LogPostPoisson, y, X, beta_tilde)
View(theta_matrix)
betas = metropolisRandomWalk(1, JInv, LogPostPoisson, y, X, beta_tilde)
plot(density(betas[,9]))
LogPostPoisson <- function(theta,y,X,mu,Sigma){ #from lecture
linPred <- (X%*%t(theta));
logLik <- sum(y*linPred- exp(linPred))
logPrior <- dmvnorm(theta, mu, Sigma, log=TRUE);
return(logLik + logPrior)
}
metropolisRandomWalk <- function(c, SIGMA, fcn, y, X, mu) { #... = y, X, mu
theta = matrix(0,1,9);
theta_matrix = matrix(0, 9, nDraws)
for (i in 1:nDraws) {
theta_proposal = rmvnorm(1, theta, c*SIGMA) #step 1
logPost_old = fcn(theta, y, X, mu, SIGMA) #step 2
logPost_new = fcn(theta_proposal, y, X, mu, SIGMA) # pass them here
alpha = min(1, exp(logPost_old - logPost_new))
comparer = runif(1,0,1) #step 3
if (alpha > comparer) {
theta = theta_proposal
}
theta_matrix[,i] = theta
}
return (theta_matrix)
}
betas = metropolisRandomWalk(1, JInv, LogPostPoisson, y, X, beta_tilde)
plot(density(betas[,9]))
LogPostPoisson <- function(theta,y,X,mu,Sigma){ #from lecture
linPred <- (X%*%t(theta));
logLik <- sum(y*linPred- exp(linPred))
logPrior <- dmvnorm(theta, mu, Sigma, log=TRUE);
return(logLik + logPrior)
}
metropolisRandomWalk <- function(c, SIGMA, fcn, ...) { #... = y, X, mu
theta = matrix(0,1,9);
theta_matrix = matrix(0, 9, nDraws)
for (i in 1:nDraws) {
theta_proposal = rmvnorm(1, theta, c*SIGMA) #step 1
logPost_old = fcn(theta, ...) #step 2
logPost_new = fcn(theta_proposal, ...) # pass them here
alpha = min(1, exp(logPost_old - logPost_new))
comparer = runif(1,0,1) #step 3
if (alpha > comparer) {
theta = theta_proposal
}
theta_matrix[,i] = theta
}
return (theta_matrix)
}
betas = metropolisRandomWalk(1, JInv, LogPostPoisson, y, X, beta_tilde, Sigma)
plot(density(betas[,9]))
LogPostPoisson <- function(theta,y,X,mu,Sigma){ #from lecture
linPred <- (X%*%t(theta));
logLik <- sum(y*linPred- exp(linPred))
logPrior <- dmvnorm(theta, mu, Sigma, log=TRUE);
return(logLik + logPrior)
}
metropolisRandomWalk <- function(c, SIGMA, fcn, ...) { #... = y, X, mu
theta = matrix(0,1,9);
theta_matrix = matrix(0, 9, nDraws)
for (i in 1:nDraws) {
theta_proposal = rmvnorm(1, theta, c*SIGMA) #step 1
logPost_old = fcn(theta, ...) #step 2
logPost_new = fcn(theta_proposal, ...) # pass them here
alpha = min(1, exp(logPost_old - logPost_new))
comparer = runif(1,0,1) #step 3
if (alpha > comparer) {
theta = theta_proposal
}
theta_matrix[,i] = theta
}
return (theta_matrix)
}
betas = metropolisRandomWalk(0.1, JInv, LogPostPoisson, y, X, beta_tilde, Sigma)
plot(density(betas[,9]))
mu = matrix(0, 9, 1)
#c
LogPostPoisson <- function(theta,y,X,mu,Sigma){ #from lecture
linPred <- (X%*%t(theta));
logLik <- sum(y*linPred- exp(linPred))
logPrior <- dmvnorm(theta, mu, Sigma, log=TRUE);
return(logLik + logPrior)
}
metropolisRandomWalk <- function(c, SIGMA, fcn, ...) { #... = y, X, mu
theta = matrix(0,1,9);
theta_matrix = matrix(0, 9, nDraws)
for (i in 1:nDraws) {
theta_proposal = rmvnorm(1, theta, c*SIGMA) #step 1
logPost_old = fcn(theta, ...) #step 2
logPost_new = fcn(theta_proposal, ...) # pass them here
alpha = min(1, exp(logPost_old - logPost_new))
comparer = runif(1,0,1) #step 3
if (alpha > comparer) {
theta = theta_proposal
}
theta_matrix[,i] = theta
}
return (theta_matrix)
}
mu = matrix(0, 9, 1)
betas = metropolisRandomWalk(0.1, JInv, LogPostPoisson, y, X, mu, Sigma)
plot(density(betas[,9]))
LogPostPoisson <- function(theta,y,X,mu,Sigma){ #from lecture
linPred <- (X%*%t(theta));
logLik <- sum(y*linPred- exp(linPred))
logPrior <- dmvnorm(theta, mu, Sigma, log=TRUE);
return(logLik + logPrior)
}
metropolisRandomWalk <- function(c, SIGMA, fcn, ...) { #... = y, X, mu
theta = matrix(0,1,9);
theta_matrix = matrix(0, 9, nDraws)
for (i in 1:nDraws) {
theta_proposal = rmvnorm(1, theta, c*SIGMA) #step 1
logPost_old = fcn(theta, ...) #step 2
logPost_new = fcn(theta_proposal, ...) # pass them here
alpha = min(1, exp(logPost_old - logPost_new))
comparer = runif(1,0,1) #step 3
if (alpha < comparer) {
theta = theta_proposal
}
theta_matrix[,i] = theta
}
return (theta_matrix)
}
mu = matrix(0, 9, 1)
Sigma = 100 * solve(t(X)%*%X)
betas = metropolisRandomWalk(1, JInv, LogPostPoisson, y, X, mu, Sigma)
plot(density(betas[,9]))
View(betas)
LogPostPoisson <- function(theta,y,X,mu,Sigma){ #from lecture
linPred <- (X%*%t(theta));
logLik <- sum(y*linPred- exp(linPred))
logPrior <- dmvnorm(theta, mu, Sigma, log=TRUE);
print(y)
return(logLik + logPrior)
}
metropolisRandomWalk <- function(c, SIGMA, fcn, ...) { #... = y, X, mu
theta = matrix(0,1,9);
theta_matrix = matrix(0, 9, nDraws)
for (i in 1:nDraws) {
theta_proposal = rmvnorm(1, theta, c*SIGMA) #step 1
logPost_old = fcn(theta, ...) #step 2
logPost_new = fcn(theta_proposal, ...) # pass them here
alpha = min(1, exp(logPost_old - logPost_new))
comparer = runif(1,0,1) #step 3
if (alpha < comparer) {
theta = theta_proposal
}
theta_matrix[,i] = theta
}
return (theta_matrix)
}
mu = matrix(0, 9, 1)
Sigma = 100 * solve(t(X)%*%X)
betas = metropolisRandomWalk(1, JInv, LogPostPoisson, y, X, mu, Sigma)
plot(density(betas[,9]))
print(Sigma)
Sigma = 100 * solve(t(X)%*%X)
Sigm
Sigma
LogPostPoisson <- function(theta,y,X,mu,Sigma){ #from lecture
linPred <- (X%*%t(theta));
logLik <- sum(y*linPred- exp(linPred))
logPrior <- dmvnorm(theta, mu, Sigma, log=TRUE);
print(Sigma)
return(logLik + logPrior)
}
metropolisRandomWalk <- function(c, SIGMA, fcn, ...) { #... = y, X, mu
theta = matrix(0,1,9);
theta_matrix = matrix(0, 9, nDraws)
for (i in 1:nDraws) {
theta_proposal = rmvnorm(1, theta, c*SIGMA) #step 1
logPost_old = fcn(theta, ...) #step 2
logPost_new = fcn(theta_proposal, ...) # pass them here
alpha = min(1, exp(logPost_old - logPost_new))
comparer = runif(1,0,1) #step 3
if (alpha < comparer) {
theta = theta_proposal
}
theta_matrix[,i] = theta
}
return (theta_matrix)
}
mu = matrix(0, 9, 1)
Sigma = 100 * solve(t(X)%*%X)
betas = metropolisRandomWalk(1, JInv, LogPostPoisson, y, X, mu, Sigma)
plot(density(betas[,9]))
Sigma = 100 * solve(t(X)%*%X)
Sigma
plot(betas[,9])
plot(density(betas[,9]))
betas[,9]
plot(density(betas[9,]))
plot(betas[9,])
plot(density(betas[9,])) #plot 9th row (MinBidShare)
plot(betas[9,]) #plot 9th row (MinBidShare)
plot(betas[9,], type="l") #plot 9th row (MinBidShare)
betas[9,995]
LogPostPoisson <- function(theta,y,X,mu,Sigma){ #from lecture
linPred <- (X%*%t(theta));
logLik <- sum(y*linPred- exp(linPred))
logPrior <- dmvnorm(theta, mu, Sigma, log=TRUE);
print(Sigma)
return(logLik + logPrior)
}
metropolisRandomWalk <- function(c, SIGMA, fcn, ...) { #... = y, X, mu
theta = matrix(0,1,9);
theta_matrix = matrix(0, 9, nDraws)
for (i in 1:nDraws) {
theta_proposal = rmvnorm(1, theta, c*SIGMA) #step 1
logPost_old = fcn(theta, ...) #step 2
logPost_new = fcn(theta_proposal, ...) # pass them here
alpha = min(1, exp(logPost_old - logPost_new))
comparer = runif(1,0,1) #step 3
if (alpha > comparer) {
theta = theta_proposal
}
theta_matrix[,i] = theta
}
return (theta_matrix)
}
mu = matrix(0, 9, 1)
Sigma = 100 * solve(t(X)%*%X)
betas = metropolisRandomWalk(1, JInv, LogPostPoisson, y, X, mu, Sigma)
plot(betas[9,], type="l") #plot 9th row (MinBidShare)
LogPostPoisson <- function(theta,y,X,mu,Sigma){ #from lecture
linPred <- (X%*%t(theta));
logLik <- sum(y*linPred- exp(linPred))
logPrior <- dmvnorm(theta, mu, Sigma, log=TRUE);
print(Sigma)
return(logLik + logPrior)
}
metropolisRandomWalk <- function(c, SIGMA, fcn, ...) { #... = y, X, mu
theta = matrix(0,1,9);
theta_matrix = matrix(0, 9, nDraws)
for (i in 1:nDraws) {
theta_proposal = rmvnorm(1, theta, c*SIGMA) #step 1
logPost_old = fcn(theta, ...) #step 2
logPost_new = fcn(theta_proposal, ...) # pass them here
alpha = min(1, exp(logPost_old - logPost_new))
comparer = runif(1,0,1) #step 3
if (alpha < comparer) {
theta = theta_proposal
}
theta_matrix[,i] = theta
}
return (theta_matrix)
}
mu = matrix(0, 9, 1)
Sigma = 100 * solve(t(X)%*%X)
betas = metropolisRandomWalk(1, JInv, LogPostPoisson, y, X, mu, Sigma)
plot(betas[9,], type="l") #plot 9th row (MinBidShare)
