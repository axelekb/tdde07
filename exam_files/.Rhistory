for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
lines(density(data))
# ------------------------------------------------------------------------------------------------------
#2
ebay_data = read.csv("eBayNumberOfBidderData.dat", header = TRUE, sep = "")
#a
beta_model = glm(formula=nBids ~ PowerSeller + VerifyID + Sealed + Minblem + MajBlem + LargNeg + LogBook + MinBidShare, data=ebay_data, family=poisson())
print(beta_model)
#b
library(mvtnorm)
#prior draws
X = as.matrix(ebay_data[,-1])
#b
plot(density(data))
#predictive draws, one draw for each draw of mu and sigma_sqr from the gibbs sampling
cut = 100 # cut away the first 100 simulations from gibbs due to convergence (burn-in?)
simulated_draws = matrix(0,nDraws-cut, 1)
for (i in 1:nDraws-cut) {
simulated_draws[i] = rnorm(1, gibbs_matrix[i+cut,1], gibbs_matrix[i+cut,2])
}
lines(density(exp(simulated_draws)), col = "red")
plot(density(exp(simulated_draws)), col = "red", xlim = c(-5, 60))
lines(density(data))
#a
linear_model = glm(formula=nBids ~ PowerSeller + VerifyID + Sealed + Minblem + MajBlem + LargNeg + LogBook + MinBidShare, data=ebay_data, family=poisson())
print(beta_model)
View(beta_model)
summary(linear_model)
0.07067/0.05633
-0.12060.02896
-0.1206/0.02896
-0.12068/0.02896
# coefficients with p-value below 0.05 are considered significant, there are 6 in this case
#b
library(mvtnorm)
#prior draws
X = as.matrix(ebay_data[,-1])
y = ebay_data$nBids
Sigma = 100 * solve(t(X)%*%X)
mu = matrix(0, 9, 1)
ebay_data = read.csv("eBayNumberOfBidderData.dat", header = TRUE, sep = "")
#a
linear_model = glm(formula=nBids ~ PowerSeller + VerifyID + Sealed + Minblem + MajBlem + LargNeg + LogBook + MinBidShare, data=ebay_data, family=poisson())
summary(linear_model)
# coefficients with p-value below 0.05 are considered significant, there are 6 in this case
#b
library(mvtnorm)
#prior draws
LogPostPoisson <- function(betas,y,X,prior_mean,prior_sd){
linPred <- (X%*%betas)
logLik <- sum(y*linPred- exp(linPred)) # log-likelihood for the poisson regression
logPrior <- dmvnorm(betas, prior_mean, prior_sd, log=TRUE) # normal prior
return(logLik + logPrior)
}
X = as.matrix(ebay_data[,-1])
y = ebay_data$nBids
#prior parameters
Sigma = 100 * solve(t(X)%*%X)
mu = matrix(0, 9, 1)
initVal = numeric(9)
#maximising the posterior prob for the betas, to find the posterior mode and hessian
optimRes = optim(initVal,LogPostPoisson, gr=NULL, y, X, mu, Sigma, method=c("BFGS"), control=list(fnscale=-1), hessian=TRUE)
beta_tilde = optimRes$par
JInv = solve(-optimRes$hessian)
View(ebay_data)
ebay_data = read.csv("eBayNumberOfBidderData.dat", header = TRUE, sep = "")
#a
linear_model = glm(formula=nBids ~ PowerSeller + VerifyID + Sealed + Minblem + MajBlem + LargNeg + LogBook + MinBidShare, data=ebay_data, family=poisson())
summary(linear_model)
# coefficients with p-value below 0.05 are considered significant, there are 6 in this case
#b
library(mvtnorm)
#prior draws
LogPostPoisson <- function(betas,y,X,prior_mean,prior_sd){
linPred <- (X%*%betas)
logLik <- sum(y*linPred- exp(linPred)) # log-likelihood for the poisson regression
logPrior <- dmvnorm(betas, prior_mean, prior_sd, log=TRUE) # normal prior
return(logLik + logPrior)
}
X = as.matrix(ebay_data[,-1])
y = ebay_data$nBids
#prior parameters
Sigma = 100 * solve(t(X)%*%X)
mu = matrix(0, 9, 1)
initVal = numeric(9)
#maximising the posterior prob for the betas, to find the posterior mode and hessian
optimRes = optim(initVal,LogPostPoisson, gr=NULL, y, X, mu, Sigma, method=c("BFGS"), control=list(fnscale=-1), hessian=TRUE)
beta_tilde = optimRes$par
JInv = solve(-optimRes$hessian)
nDraws = 1000
#making the posterior beta draws from the approx. multivariate normal, using mode and JInv calculated above
betas_posterior = rmvnorm(nDraws, beta_tilde, JInv)
plot(density(betas_posterior[,9]))
par(mfrow = c(3,3))
lines(betas[1,], type="l")
lines(betas[2,], type="l")
LogPostPoisson <- function(theta,y,X,prior_mean,prior_sd){
linPred <- (X%*%t(theta));
logLik <- sum(y*linPred- exp(linPred))
logPrior <- dmvnorm(theta, prior_mean, prior_sd, log=TRUE);
return(logLik + logPrior)
}
metropolisRandomWalk <- function(c, proposal_sigma, fcn, ...) { #... = y, X, prior mean, prior sigma
n_param = as.numeric(dim(SIGMA)[1])
theta = matrix(0,1,n_param);
theta_matrix = matrix(0, n_param, nDraws)
for (i in 1:nDraws) {
theta_proposal = rmvnorm(1, theta, c*proposal_sigma) #sample proposal
logPost_old = fcn(theta, ...) #posterior probability for old theta
logPost_new = fcn(theta_proposal, ...) #posterior probability for proposal theta
alpha = min(1, exp(logPost_new - logPost_old)) #acceptance probability
comparer = runif(1,0,1) #with probability alpha, set theta_i = theta_proposal, theta_i-1 otherwise (i.e. no update)
if (alpha >= comparer) {
theta = theta_proposal
}
theta_matrix[,i] = theta
}
return (theta_matrix)
}
set.seed(12345)
nDraws = 1000
X = as.matrix(ebay_data[,-1])
y = ebay_data$nBids
prior_mean = matrix(0, 9, 1)
prior_sd = 100 * solve(t(X)%*%X)
c = 1
betas = metropolisRandomWalk(c, JInv, LogPostPoisson, y, X, prior_mean, prior_sd)
metropolisRandomWalk <- function(c, proposal_sigma, fcn, ...) { #... = y, X, prior mean, prior sigma
n_param = as.numeric(dim(proposal_sigma)[1])
theta = matrix(0,1,n_param);
theta_matrix = matrix(0, n_param, nDraws)
for (i in 1:nDraws) {
theta_proposal = rmvnorm(1, theta, c*proposal_sigma) #sample proposal
logPost_old = fcn(theta, ...) #posterior probability for old theta
logPost_new = fcn(theta_proposal, ...) #posterior probability for proposal theta
alpha = min(1, exp(logPost_new - logPost_old)) #acceptance probability
comparer = runif(1,0,1) #with probability alpha, set theta_i = theta_proposal, theta_i-1 otherwise (i.e. no update)
if (alpha >= comparer) {
theta = theta_proposal
}
theta_matrix[,i] = theta
}
return (theta_matrix)
}
set.seed(12345)
nDraws = 1000
X = as.matrix(ebay_data[,-1])
y = ebay_data$nBids
prior_mean = matrix(0, 9, 1)
prior_sd = 100 * solve(t(X)%*%X)
c = 1
betas = metropolisRandomWalk(c, JInv, LogPostPoisson, y, X, prior_mean, prior_sd)
par(mfrow = c(3,3))
lines(betas[1,], type="l")
lines(betas[2,], type="l")
par(mfrow = c(3,3))
lines(betas[1,], type="l")
lines(betas[2,], type="l")
hist(betas[1,])
par(mfrow = c(3,3))
plot(betas[1,], type="l")
par(mfrow = c(3,3))
plot(betas[1,], type="l")
plot(betas[2,], type="l")
plot(betas[3,], type="l")
plot(betas[4,], type="l")
plot(betas[5,], type="l")
plot(betas[6,], type="l")
plot(betas[7,], type="l")
plot(betas[8,], type="l")
plot(betas[9,], type="l") #plot MinBidShare
par(mfrow = c(3,3))
plot(betas[1,], type="l")
plot(betas[2,], type="l")
plot(betas[3,], type="l")
plot(betas[4,], type="l")
plot(betas[5,], type="l")
plot(betas[6,], type="l")
plot(betas[7,], type="l")
plot(betas[8,], type="l")
plot(betas[9,], type="l")
X = matrix(c(1, 1, 0, 1, 0, 1, 0, 1.2, 0.8), 9, 1)
View(X)
nBidders = c()
count = 0
nBidders = c()
for (i in 1:nDraws) {
nBidders[i] = rpois(1, exp(Xd%*%t(betas[,i])))
}
length(nBidders[nBidders < 1]) / nDraws
max(nBidders)
plot(hist(nBidders, breaks=10))
library(ggplot2)
qplot(nBidders, geom="histogram")
betas
View(betas)
for (i in 1:nDraws) {
nBidders[i] = rpois(1, exp(X %*% t(betas[,i])))
}
length(nBidders[nBidders < 1]) / nDraws
length(nBidders[nBidders == 1]) / nDraws #using the predictive draws to calculate p(y_new=0|y)
length(nBidders[nBidders == 0]) / nDraws #using the predictive draws to calculate p(y_new=0|y)
max(nBidders)
plot(hist(nBidders, breaks=10))
plot(hist(nBidders, breaks=10))
plot(hist(nBidders, breaks=10))
plot(hist(nBidders, breaks=10))
plot(hist(nBidders, breaks=10))
plot(hist(nBidders, breaks=10))
plot(hist(nBidders, breaks=10))
plot(hist(nBidders, breaks=10))
dev.off()
plot(hist(nBidders, breaks=10))
par(mfrow = c(3,3))
plot(betas[1,], type="l")
plot(betas[2,], type="l")
plot(betas[3,], type="l")
plot(betas[4,], type="l")
plot(betas[5,], type="l")
plot(betas[6,], type="l")
plot(betas[7,], type="l")
plot(betas[8,], type="l")
plot(betas[9,], type="l")
dev.off()
par(mfrow = c(3,3))
plot(betas[1,], type="l")
plot(betas[2,], type="l")
plot(betas[3,], type="l")
plot(betas[4,], type="l")
plot(betas[5,], type="l")
plot(betas[6,], type="l")
plot(betas[7,], type="l")
plot(betas[8,], type="l")
plot(betas[9,], type="l")
plot(hist(nBidders, breaks=10))
dev.off()
plot(hist(nBidders, breaks=10))
length(nBidders[nBidders == 0])
length(nBidders[nBidders == 1])
length(nBidders[nBidders == 2])
length(nBidders[nBidders == 3])
length(nBidders[nBidders == 4])
length(nBidders[nBidders == 5])
library(ggplot2)
qplot(nBidders, geom="histogram")
X = matrix(c(1, 1, 0, 1, 0, 1, 0, 1.2, 0.8), 9, 1)
nBidders = c()
cut = 400
for (i in 1:nDraws-cut) {
nBidders[i] = rpois(1, exp(X %*% t(betas[,i + cut])))
}
length(nBidders[nBidders == 0]) / nDraws #using the predictive draws to calculate p(y_new=0|y)
dev.off()
plot(hist(nBidders, breaks=10))
library(ggplot2)
qplot(nBidders, geom="histogram")
plot(hist(nBidders))
qplot(nBidders, geom="histogram")
hist(nBidders)
qplot(nBidders, geom="histogram")
hist(nBidders)
length(nBidders[nBidders == 0])
View(X)
X = as.matrix(ebay_data[,-1])
View(X)
#d
X = matrix(c(1, 1, 0, 1, 0, 1, 0, 1.2, 0.8), 9, 1)
View(X)
#d
X = matrix(c(1, 1, 0, 1, 0, 1, 0, 1.2, 0.8), 1, 9)
View(X)
X = matrix(c(1, 1, 0, 1, 0, 1, 0, 1.2, 0.8), 1, 9)
nBidders = c()
cut = 400
for (i in 1:nDraws-cut) {
nBidders[i] = rpois(1, exp(t(X) %*% betas[,i + cut]))
}
length(nBidders[nBidders == 0]) / nDraws #using the predictive draws to calculate p(y_new=0|y)
dev.off()
hist(nBidders)
X = matrix(c(1, 1, 0, 1, 0, 1, 0, 1.2, 0.8), 1, 9)
nBidders = c()
cut = 400
for (i in 1:nDraws-cut) {
nBidders[i] = rpois(1, exp(t(X) %*% betas[,i + cut]))
}
length(nBidders[nBidders == 0]) / nDraws #using the predictive draws to calculate p(y_new=0|y)
dev.off()
hist(nBidders)
X = matrix(c(1, 1, 0, 1, 0, 1, 0, 1.2, 0.8), 1, 9)
nBidders = c()
cut = 400
for (i in 1:nDraws-cut) {
nBidders[i] = rpois(1, exp(t(X) %*% betas[,i + cut]))
}
length(nBidders[nBidders == 0]) / nDraws #using the predictive draws to calculate p(y_new=0|y)
dev.off()
hist(nBidders)
X = matrix(c(1, 1, 0, 1, 0, 1, 0, 1.2, 0.8), 1, 9)
nBidders = c()
cut = 400
for (i in 1:nDraws-cut) {
nBidders[i] = rpois(1, exp(t(X) %*% betas[,i + cut]))
}
length(nBidders[nBidders == 0]) / nDraws #using the predictive draws to calculate p(y_new=0|y)
dev.off()
hist(nBidders)
X = matrix(c(1, 1, 0, 1, 0, 1, 0, 1.2, 0.8), 1, 9)
nBidders = c()
cut = 400
for (i in 1:nDraws-cut) {
nBidders[i] = rpois(1, exp(t(X) %*% betas[,i + cut]))
}
length(nBidders[nBidders == 0]) / nDraws #using the predictive draws to calculate p(y_new=0|y)
dev.off()
hist(nBidders)
hist(nBidders, prob=TRUE)
hist(nBidders, prob=FALSE)
min(nBidders)
max(nBidders)
hist(nBidders, breaks=0:9)
hist(nBidders, breaks=0:9)
hist(nBidders, breaks=0:10)
hist(nBidders)
hist(nBidders, breaks=0:9, freq=FALSE)
nBidders
length(nBidders[nBidders == 0])
qplot(nBidders, geom="histogram")
barplot(nBidders)
hist(nBidders) # histogram showing wrong values on y-axis??
library(ggplot2)
qplot(nBidders, geom="histogram")
qplot(nBidders, geom="histogram") # this is correct
